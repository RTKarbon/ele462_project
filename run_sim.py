#!/usr/bin/python

import os, re
from optparse import OptionParser


def setEnv():
    os.system('source /usr/licensed/synopsys/profile.20130806')

def main():
    setEnv()

    # Parsing rutime arguments
    parser = OptionParser()
    parser.add_option("-N", dest="N", help="Number of chains", default=100)
    parser.add_option("-M", dest="M", help="Type of a wire model", default=1)

    (options, args) = parser.parse_args()
    chain_number = int(options.N)
    model_type = int(options.M)
    model_name = 'wire_model_%d' % model_type
    spice_name = model_name + '.sp'
    matlab_name = model_name + '.m'


    print "number of stages: %d" % chain_number
    print "Model_name: %s" % model_name
    print "Starting work"


    os.system('rm -f %s' % spice_name) # spice file is generated by Matlab
    os.system('echo "exit;" >> %s' % matlab_name)
    os.system('matlab -nodisplay -nosplash -nodesktop -r "%s(%d)"' % (model_name, chain_number))
    print 'Matlab finished generation of SPICE model'

    fin = open(spice_name, 'r')
    cont = fin.read()
    fin.close()
    cont = re.sub(',', '', cont)
    fout = open(spice_name, 'w')
    fout.write(cont)
    fout.close()
    print 'SPICE model has been processed for running with hspice'

    os.system('hspice %s > hspice.log' % spice_name)
    print 'hspice finished work'

    os.system('echo "exit;" >> hspice_output_analyzer.m')
    os.system('matlab -nodisplay -nosplash -nodesktop -r "hspice_output_analyzer(%d)"' % chain_number)
    print 'Matlab analyzer finished'

    fin = open('./result_table.txt', 'r')
    cont = fin.read()
    fin.close()
    print cont

if __name__ == '__main__':
    main()
